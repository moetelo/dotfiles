[
    { "key": "alt+left",  "command": "workbench.action.navigateBack" },
    { "key": "alt+right", "command": "workbench.action.navigateForward" },

    { "key": "ctrl+tab", "command": "workbench.action.nextEditorInGroup" },
    { "key": "ctrl+shift+tab", "command": "workbench.action.previousEditorInGroup" },

    { "key": "ctrl+shift+g", "command": "git.checkout" },
    { "key": "ctrl+shift+s", "command": "workbench.view.scm", "when": "workbench.scm.active" },
    { "key": "ctrl+shift+p", "command": "gitlens.openFileHistory" },

    // conflicts with layout toggle
    { "key": "shift+alt+f12", "command": "-references-view.findReferences", "when": "editorHasReferenceProvider" },
    { "key": "shift+f12", "command": "references-view.findReferences", "when": "editorHasReferenceProvider" },
    { "key": "ctrl+shift+r", "command": "references-view.findReferences" },

    {
        "key": "ctrl+enter",
        "command": "-github.copilot.generate",
        "when": "editorTextFocus && github.copilot.activated && !commentEditorFocused && !inInteractiveInput && !interactiveEditorFocused"
    },
    {
        "key": "ctrl+shift+g g",
        "command": "-workbench.view.scm",
        "when": "workbench.scm.active && !gitlens:disabled && config.gitlens.keymap == 'chorded'"
    },
    {
        "key": "ctrl+shift+alt+l",
        "command": "-workbench.action.quickchat.toggle",
        "when": "chatIsEnabled"
    },

    {
        "key": "ctrl+k ctrl+l",
        "command": "editor.action.showDefinitionPreviewHover"
    },
    {
        "key": "ctrl+enter",
        "command": "-github.copilot.generate",
        "when": "editorTextFocus && github.copilot.activated && !commentEditorFocused"
    },
    {
        "key": "ctrl+m",
        "command": "-editor.action.toggleTabFocusMode"
    },

    {
        "key": "ctrl+k",
        "command": "editor.action.setSelectionAnchor",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+k ctrl+b",
        "command": "-editor.action.setSelectionAnchor",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+l",
        "command": "editor.action.selectFromAnchorToCursor",
        "when": "editorTextFocus && selectionAnchorSet"
    },
    {
        "key": "ctrl+k ctrl+k",
        "command": "-editor.action.selectFromAnchorToCursor",
        "when": "editorTextFocus && selectionAnchorSet"
    },
    {
        "key": "ctrl+shift+5",
        "command": "editor.action.jumpToBracket",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+\\",
        "command": "-editor.action.jumpToBracket",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+y",
        "command": "workbench.view.testing.focus"
    },
    {
        "key": "f4",
        "command": "goToNextReference",
        "when": "inReferenceSearchEditor"
    },
    {
        "key": "f4",
        "command": "-goToNextReference",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },

    { "key": "ctrl+y", "command": "-editor.action.inlineDiffs.acceptPartialEdit", "when": "editorTextFocus && inlineDiffs.activeEditorWithDiffs" },
    { "key": "ctrl+y", "command": "-aichat.newfollowupaction" },
    { "key": "ctrl+shift+r", "command": "-editor.action.refactor", "when": "editorHasCodeActionsProvider && textInputFocus && !editorReadonly" },
    { "key": "ctrl+shift+s", "command": "-workbench.action.openAgentsView", "when": "!isInBackgroundComposerWindow" },
    { "key": "ctrl+shift+s", "command": "-workbench.action.files.saveAs" },
    { "key": "ctrl+shift+l", "command": "-aichat.insertselectionintochat" },
    { "key": "ctrl+l", "command": "-composer.sendToAgent", "when": "editorHasPromptBar && editorPromptBarFocused" },
    { "key": "ctrl+l", "command": "-aichat.newchataction" },

    {
        "key": "ctrl+alt+i",
        "command": "composer.startComposerPrompt",
        "when": "cursor.appLayout != 'agent'"
    },
    {
        "key": "ctrl+i",
        "command": "-composer.startComposerPrompt",
        "when": "cursor.appLayout != 'agent'"
    },

    // prefer built-in tab over Cursor tab
    {
        "key": "tab",
        "command": "editor.action.acceptCursorTabSuggestion",
        "when": "cpp.shouldAcceptTab && !suggestWidgetHasFocusedSuggestion"
    },
    {
        "key": "tab",
        "command": "-editor.action.acceptCursorTabSuggestion",
        "when": "cpp.shouldAcceptTab"
    },
]
